// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id    String @id @unique //matches kinde user id
  email String @unique

  File    File[]
  Message Message[]
  QnaSet  QnaSet[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages Message[]
  QnaSet    QnaSet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
}

enum QuestionType {
    SUBJECTIVE
    MCQ
}

model Qna {
  id            String       @id @default(cuid())
  question      String       @db.Text()
  answer        String       @db.Text()
  questionType  QuestionType @default(SUBJECTIVE)
  options       String[]               // Array of answer options for MCQs (can be empty if not applicable)
  explanation   String?      @db.Text()// Optional: Store the correct answer for MCQs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  qnaSetId String // Foreign key for QnaSet
  QnaSet   QnaSet  @relation(fields: [qnaSetId], references: [id])
}

model QnaSet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Qnas Qna[]

  userId String?
  User   User?   @relation(fields: [userId], references: [id])
  fileId String?
  File   File?   @relation(fields: [fileId], references: [id])
}
